{"ast":null,"code":"var _jsxFileName = \"/Users/mikefang/Documents/cs-3152/no-strings-attached/LevelEditor/src/Rectangle.js\";\nimport React from 'react';\nimport { Rect, Transformer } from 'react-konva';\n\nconst Rectangle = ({\n  shapeProps,\n  isSelected,\n  onSelect,\n  onChange\n}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(Rect, Object.assign({\n    onClick: onSelect,\n    ref: shapeRef\n  }, shapeProps, {\n    draggable: true,\n    onDragEnd: e => {\n      onChange({ ...shapeProps,\n        x: e.target.x(),\n        y: e.target.y()\n      });\n    },\n    onTransformEnd: e => {\n      // transformer is changing scale of the node\n      // and NOT its width or height\n      // but in the store we have only width and height\n      // to match the data better we will reset scale on transform end\n      const node = shapeRef.current;\n      const scaleX = node.scaleX();\n      const scaleY = node.scaleY(); // we will reset it back\n\n      node.scaleX(1);\n      node.scaleY(1);\n      onChange({ ...shapeProps,\n        x: node.x(),\n        y: node.y(),\n        // set minimal value\n        width: Math.max(5, node.width() * scaleX),\n        height: Math.max(node.height() * scaleY)\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  })), isSelected && React.createElement(Transformer, {\n    ref: trRef,\n    boundBoxFunc: (oldBox, newBox) => {\n      // limit resize\n      if (newBox.width < 5 || newBox.height < 5) {\n        return oldBox;\n      }\n\n      return newBox;\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n};\n\nexport default Rectangle;","map":{"version":3,"sources":["/Users/mikefang/Documents/cs-3152/no-strings-attached/LevelEditor/src/Rectangle.js"],"names":["React","Rect","Transformer","Rectangle","shapeProps","isSelected","onSelect","onChange","shapeRef","useRef","trRef","useEffect","current","setNode","getLayer","batchDraw","e","x","target","y","node","scaleX","scaleY","width","Math","max","height","oldBox","newBox"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,WAAf,QAAkC,aAAlC;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,UAAd;AAA0BC,EAAAA,QAA1B;AAAoCC,EAAAA;AAApC,CAAD,KAAoD;AACpE,QAAMC,QAAQ,GAAGR,KAAK,CAACS,MAAN,EAAjB;AACA,QAAMC,KAAK,GAAGV,KAAK,CAACS,MAAN,EAAd;AAEAT,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB,QAAIN,UAAJ,EAAgB;AACd;AACAK,MAAAA,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBL,QAAQ,CAACI,OAA/B;AACAF,MAAAA,KAAK,CAACE,OAAN,CAAcE,QAAd,GAAyBC,SAAzB;AACD;AACF,GAND,EAMG,CAACV,UAAD,CANH;AAQA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AACE,IAAA,OAAO,EAAEC,QADX;AAEE,IAAA,GAAG,EAAEE;AAFP,KAGMJ,UAHN;AAIE,IAAA,SAAS,MAJX;AAKE,IAAA,SAAS,EAAEY,CAAC,IAAI;AACdT,MAAAA,QAAQ,CAAC,EACP,GAAGH,UADI;AAEPa,QAAAA,CAAC,EAAED,CAAC,CAACE,MAAF,CAASD,CAAT,EAFI;AAGPE,QAAAA,CAAC,EAAEH,CAAC,CAACE,MAAF,CAASC,CAAT;AAHI,OAAD,CAAR;AAKD,KAXH;AAYE,IAAA,cAAc,EAAEH,CAAC,IAAI;AACnB;AACA;AACA;AACA;AACA,YAAMI,IAAI,GAAGZ,QAAQ,CAACI,OAAtB;AACA,YAAMS,MAAM,GAAGD,IAAI,CAACC,MAAL,EAAf;AACA,YAAMC,MAAM,GAAGF,IAAI,CAACE,MAAL,EAAf,CAPmB,CASnB;;AACAF,MAAAA,IAAI,CAACC,MAAL,CAAY,CAAZ;AACAD,MAAAA,IAAI,CAACE,MAAL,CAAY,CAAZ;AACAf,MAAAA,QAAQ,CAAC,EACP,GAAGH,UADI;AAEPa,QAAAA,CAAC,EAAEG,IAAI,CAACH,CAAL,EAFI;AAGPE,QAAAA,CAAC,EAAEC,IAAI,CAACD,CAAL,EAHI;AAIP;AACAI,QAAAA,KAAK,EAAEC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,IAAI,CAACG,KAAL,KAAeF,MAA3B,CALA;AAMPK,QAAAA,MAAM,EAAEF,IAAI,CAACC,GAAL,CAASL,IAAI,CAACM,MAAL,KAAgBJ,MAAzB;AAND,OAAD,CAAR;AAQD,KAhCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAmCGjB,UAAU,IACT,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEK,KADP;AAEE,IAAA,YAAY,EAAE,CAACiB,MAAD,EAASC,MAAT,KAAoB;AAChC;AACA,UAAIA,MAAM,CAACL,KAAP,GAAe,CAAf,IAAoBK,MAAM,CAACF,MAAP,GAAgB,CAAxC,EAA2C;AACzC,eAAOC,MAAP;AACD;;AACD,aAAOC,MAAP;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApCJ,CADF;AAkDD,CA9DD;;AA+DA,eAAezB,SAAf","sourcesContent":["import React from 'react';\nimport { Rect, Transformer } from 'react-konva';\n\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.setNode(shapeRef.current);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        onClick={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onDragEnd={e => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y()\n          });\n        }}\n        onTransformEnd={e => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY)\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\nexport default Rectangle;"]},"metadata":{},"sourceType":"module"}